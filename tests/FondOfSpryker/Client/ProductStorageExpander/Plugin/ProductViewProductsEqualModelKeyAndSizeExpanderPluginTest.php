<?php

namespace FondOfSpryker\Client\ProductStorageExpander\Plugin;

use Codeception\Test\Unit;
use FondOfSpryker\Client\ProductStorageExpander\Dependency\Client\ProductStorageExpanderToProductPageSearchExpanderClientBridge;
use FondOfSpryker\Client\ProductStorageExpander\ProductStorageExpanderFactory;
use Generated\Shared\Transfer\ProductViewTransfer;

class ProductViewProductsEqualModelKeyAndSizeExpanderPluginTest extends Unit
{
    /**
     * @var \FondOfSpryker\Client\ProductPageSearchExpander\Plugin\ProductViewProductsEqualModelKeyAndSizeExpanderPlugin
     */
    protected $expanderPlugin;

    /**
     * @var \FondOfSpryker\Client\ProductStorageExpander\ProductStorageExpanderFactory|\PHPUnit\Framework\MockObject\MockObject
     */
    protected $factoryMock;

    /**
     * @var \Generated\Shared\Transfer\ProductViewTransfer|\PHPUnit\Framework\MockObject\MockObject
     */
    protected $productViewTransferMock;

    /**
     * @var \FondOfSpryker\Client\ProductStorageExpander\Dependency\Client\ProductStorageExpanderToProductPageSearchExpanderClientBridge|\PHPUnit\Framework\MockObject\MockObject
     */
    protected $clientMock;

    protected function _before()
    {
        parent::_before(); // TODO: Change the autogenerated stub

        $this->factoryMock = $this->getMockBuilder(ProductStorageExpanderFactory::class)
            ->disableOriginalConstructor()
            ->getMock();

        $this->productViewTransferMock = $this->getMockBuilder(ProductViewTransfer::class)
            ->setMethods(['getAttributes', 'setProductsWithSameModelKeyAndSize'])
            ->disableOriginalConstructor()
            ->getMock();

        $this->clientMock = $this->getMockBuilder(ProductStorageExpanderToProductPageSearchExpanderClientBridge::class)
            ->disableOriginalConstructor()
            ->getMock();

        $this->expanderPlugin = new ProductViewProductsEqualModelKeyAndSizeExpanderPlugin();
        $this->expanderPlugin->setFactory($this->factoryMock);
    }

    public function testExpandProductViewTransferSuccess(): void
    {
        $this->productViewTransferMock->expects($this->once())
            ->method('getAttributes')
            ->willReturn([
                'model_key' => 'model_key',
                'size' => 'size'
            ]);

        $this->factoryMock->expects($this->once())
            ->method('getProductPageSearchExpanderClient')
            ->willReturn($this->clientMock);

        $this->clientMock->expects($this->once())
            ->method('getProductsWithSameModelKeyAndSize')
            ->willReturn(['products' => ['product1', 'product2', 'product3']]);

        $this->productViewTransferMock->expects($this->once())
            ->method('setProductsWithSameModelKeyAndSize')
            ->willReturn($this->productViewTransferMock);

        $productViewTranfer = $this->expanderPlugin->expandProductViewTransfer(
            $this->productViewTransferMock, [], 'en_US'
        );

        $this->assertInstanceOf(ProductViewTransfer::class, $productViewTranfer);
    }

    public function testExpandProductViewTransferFailedAttributeMissing()
    {
        $this->productViewTransferMock->expects($this->once())
            ->method('getAttributes')
            ->willReturn([
                'model_key' => 'model_key',
                //'size' => 'size'
            ]);

        $this->factoryMock->expects($this->never())
            ->method('getProductPageSearchExpanderClient')
            ->willReturn($this->clientMock);

        $this->clientMock->expects($this->never())
            ->method('getProductsWithSameModelKeyAndSize')
            ->willReturn(['products' => ['product1', 'product2', 'product3']]);

        $this->productViewTransferMock->expects($this->never())
            ->method('setProductsWithSameModelKeyAndSize')
            ->willReturn($this->productViewTransferMock);

        $productViewTranfer = $this->expanderPlugin->expandProductViewTransfer(
            $this->productViewTransferMock, [], 'en_US'
        );

        $this->assertInstanceOf(ProductViewTransfer::class, $productViewTranfer);
    }

    public function testExpandProductViewTransferFailedNoQueryResults()
    {
        $this->productViewTransferMock->expects($this->once())
            ->method('getAttributes')
            ->willReturn([
                'model_key' => 'model_key',
                'size' => 'size'
            ]);

        $this->factoryMock->expects($this->once())
            ->method('getProductPageSearchExpanderClient')
            ->willReturn($this->clientMock);

        $this->clientMock->expects($this->once())
            ->method('getProductsWithSameModelKeyAndSize')
            ->willReturn([]);

        $this->productViewTransferMock->expects($this->never())
            ->method('setProductsWithSameModelKeyAndSize')
            ->willReturn($this->productViewTransferMock);

        $productViewTranfer = $this->expanderPlugin->expandProductViewTransfer(
            $this->productViewTransferMock, [], 'en_US'
        );
    }
}
